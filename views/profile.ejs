<!DOCTYPE html>
<html lang="en">
   <head>
      <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/shards-ui@3.0.0/dist/css/shards.min.css">
      <script src="https://cdn.jsdelivr.net/npm/shards-ui@3.0.0/dist/js/shards.min.js"></script>
      <link href="https://fonts.googleapis.com/css2?family=Roboto+Slab&display=swap" rel="stylesheet">
      <link rel="stylesheet" href="/css/styles.css">
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title> <%= user.full_name %> (@<%= user.username %>) - Profile</title>
      <meta property="og:title" content="<%= user.full_name %> (@<%= user.username %>) - Profile">
      <meta property="og:description" content="View the profile of <%= user.full_name %> (@<%= user.username %>) on our site.">
      <meta property="og:image" content="<%= user.photo %>">
      <meta property="og:url" content="https://demo.truanon.com/users/<%= user.username %>">
      <meta name="twitter:title" content="<%= user.full_name %> (@<%= user.username %>) - Profile">
      <meta name="twitter:description" content="View the profile of <%= user.full_name %> (@<%= user.username %>) on our site.">
      <meta name="twitter:image" content="<%= user.photo %>">
      <meta name="twitter:card" content="summary_large_image">
      <link rel="icon" type="image/x-icon" href="https://truanon.s3.amazonaws.com/img/dogsquare.ico">
      <link rel="icon" type="image/png" sizes="16x16" href="https://truanon.s3.amazonaws.com/img/dogsquare.ico">
      <link rel="icon" type="image/png" sizes="32x32" href="https://truanon.s3.amazonaws.com/img/dogsquare.ico">
      <link rel="icon" type="image/png" sizes="64x64" href="https://truanon.s3.amazonaws.com/img/dogsquare.ico">
      <link rel="icon" type="image/png" sizes="128x128" href="https://truanon.s3.amazonaws.com/img/dogsquare.ico">
      <link rel="icon" type="image/png" sizes="256x256" href="https://truanon.s3.amazonaws.com/img/dogsquare.ico">
   </head>
   <body>
      <%- include('header', { currentPage: 'Member Profile' }) %> <!-- Include your header -->
       
       <style>
         .custom-border-4 {
  border-width: 2.25px !important;
}
         ul {
            padding: 1rem;
         }
       </style>
      <div class="container-xxl my-md-4 bd-layout" >
         <div id="containerDiv">
            <div class="container-xxl my-md-4 bd-layout">
               <div class="row gutters-sm">
                  <div class="col-md-4 mb-3">
                     <div class="card">
                        <div class="card-body">
                           <div class="align-items-center text-center">
                              <img id="photo" src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="Admin" class="rounded-circle border custom-border-4" width="150">
                              <div class="mt-3">
                                 <h4 id="fullname">John Doe</h4>
                                 <p id="username" class="text-secondary mb-1">Full Stack Developer</p>
                                 <p id="location" class="text-muted font-size-sm">Bay Area, San Francisco, CA</p>
                                 <div id="badge-area"></div>
                                 <button class="btn btn-primary">Follow</button>
                                 <button class="btn btn-outline-primary">Message</button>
                              </div>
                           </div>
                        </div>
                     </div>
                     <div id="new-slot" class="card mt-3">
                     </div>
                  </div>
                  <div id="personal-space" class="col-md-8"></div>
               </div>
            </div>
         </div>
      </div>
      <script>
         var verifiedDetails = JSON.parse(JSON.parse(decodeURIComponent('<%= encodeURIComponent(JSON.stringify(verifiedDetails)) %>')));
         var containerDivOld = $('#containerDiv');
         
         
         
         function getPhotoBorderColor(authorRank) {
         switch (authorRank) {
         case 'Dangerous':
         return 'danger';
         case 'Cautioned':
         return 'warning';
         case 'Credible':
         return 'secondary';
         case 'Reliable':
         return 'success';
         case 'Genuine':
         return 'primary';
         default:
         return 'warning';
         }
         }
         
         // if a user switch_state is true
         // the author verifiedDetails.authorRank will show one of five levels
         // Dangerous, Cautioned, Creditble, Reliable and Genuin
         // we want bootstrap colors danger, warning, secondary, success and primary to relate to each state
         // we want a short javascript function that returns the css class to be added to rounded-circle
         // in order to set the color of this user's photo border to their proper color
         var photo = $('#photo');
         photo.attr('src', '<%= user.photo %>');
         photo.attr('alt', 'Profile photo');
         photo.attr('className', 'rounded-circle');
         photo.attr('max-width', '280');
         photo.addClass("custom-border-4");
         photo.addClass("border-" + getPhotoBorderColor(verifiedDetails.authorRank));
         
         //containerDivOld.append(photo);
         
         const name = $('#fullname');
         name.text('<%= user.full_name %>');
         
         const name2 = $('#fullname2');
         name2.text('<%= user.full_name %>');
         
         const username = $('#username');
         username.text('@<%= user.username %> ');
         
         const ulocation = $('#location');
         ulocation.text('<%= user.location %>');
         
         const address2 = $('#address2');
         address2.text('<%= user.location %>');
         
         
         function filterDataConfigurations(myData, dataPointType, dataPointKind) {
         // Return an empty array if myData is empty or myData.dataConfigurations is not defined
         if (!myData || !myData.dataConfigurations) {
         return [];
         }
         
         // Use the filter() method to filter the objects from myData.dataConfigurations
         // that match the specified dataPointType and dataPointKind.
         var filteredData = myData.dataConfigurations.filter(function(config) {
         if (dataPointType.length) {
         return config.dataPointType === dataPointType && config.dataPointKind === dataPointKind;
         }
         return config.dataPointKind === dataPointKind;
         });
         
         return filteredData;
         }
         
         var badge = document.createElement("span");
         badge.className = "w-100 btn disabled btn-outline-warning mb-4";
         
         var badgeLogo = document.createElement("span");
         badgeLogo.className = "fas fa-check-circle fa-5x align-middle p-2";
         badge.appendChild(badgeLogo);
         
         var badgeRank = document.createElement("div");
         badgeRank.className = "badge-rank h3";
         badgeRank.innerText = "Unknown";
         badge.appendChild(badgeRank);
         
         var badgeScore = document.createElement("div");
         badgeScore.className = "badge-score h5";
         badgeScore.innerText = "Ask This Member To Verify Their Identity";
         badge.appendChild(badgeScore);
         
         //containerDivOld.append(badge);
         $('#badge-area').html(badge);
         
      </script>
      <% if (user.switch_state) { %>
      <script>
         var verifiedDetails = JSON.parse(JSON.parse(decodeURIComponent('<%= encodeURIComponent(JSON.stringify(verifiedDetails)) %>')));
         var containerDivOld = $('#containerDiv');
         
         var photo = $('#photo');
         // photo.attr('src', verifiedDetails.authorPhoto);
         // photo.attr('alt', 'Profile photo');
         // photo.attr('className', 'rounded-circle');
         // photo.attr('width', '150');
         //photo.addClass("border-secondary");
         
         
         
         var fulocation = $('#location');
         fulocation.text(verifiedDetails.authorTitle);
         
         var address23 = $('#address2');
         address23.text(verifiedDetails.authorTitle);
         
         var badge = document.createElement("a");
         badge.className = "w-100 btn mb-4 btn-outline-" + getPhotoBorderColor(verifiedDetails.authorRank);
         badge.href = "https://" + filterDataConfigurations(verifiedDetails, "truanon", "social")[0].displayValue;
         badge.target = "_blank";
         
         var badgeLogo = document.createElement("span");
         badgeLogo.className = "fas fa-check-circle fa-5x  align-middle p-2";
         badge.appendChild(badgeLogo);
         
         var badgeRank = document.createElement("div");
         badgeRank.className = "badge-rank h3";
         badgeRank.innerText = verifiedDetails.authorRank;
         badge.appendChild(badgeRank);
         
         var badgeScore = document.createElement("div");
         badgeScore.className = "badge-score h5";
         badgeScore.innerText = "(" + verifiedDetails.authorRankScore + " of 5)";
         badge.appendChild(badgeScore);
         
         $('#badge-area').html(badge);
         
         const dataConfigurationsList = document.createElement("ul");
         
         var filteredData = filterDataConfigurations(verifiedDetails, "", "social");
         var truanonOnly = filterDataConfigurations(verifiedDetails, "truanon", "social");
         
         // Create a new array that includes all elements in `filteredData` that are NOT in `truanonOnly`
         var filteredDataMinusTruanon = filteredData.filter(function(config) {
         // Return true if `config` is not in `truanonOnly`
         return !truanonOnly.includes(config);
         });
         
         var dataConfigurationsListHTML = createDataConfigurationsList(filteredDataMinusTruanon);
         
         document.body.appendChild(dataConfigurationsListHTML);
         
         var filteredData = filterDataConfigurations(verifiedDetails, "", "contact").concat(filterDataConfigurations(verifiedDetails, "", "primary")).concat(filterDataConfigurations(verifiedDetails, "", "additional")).concat(filterDataConfigurations(verifiedDetails, "bio", "personal"));
         var dataConfigurationsListHTML = createContactList(filteredData);
         $('#personal-space').append(dataConfigurationsListHTML);
         
         function createContactList(filteredData) {
         const dataConfigurationsList = document.createElement("div");
         dataConfigurationsList.classList.add("card", "mb-3");
         
         const headerDiv = document.createElement("div");
         headerDiv.classList.add("card-header","text-center", "h5", "text-secondary");
         headerDiv.innerText = "Verified Identity Details";
         dataConfigurationsList.appendChild(headerDiv);
         
         
         const cardBody = document.createElement("div");
         cardBody.classList.add("card-body");
         dataConfigurationsList.appendChild(cardBody);
         
         filteredData.forEach((dataConfig, index) => {
         const row = document.createElement("div");
         row.classList.add("row");
         cardBody.appendChild(row);
         var data = dataConfig;
         
         const col1 = document.createElement("div");
         col1.classList.add("col-sm-3");
         row.appendChild(col1);
         
         const titleHeader = document.createElement("h6");
         titleHeader.classList.add("mb-0");
         titleHeader.innerText = data.dataPointName;
         col1.appendChild(titleHeader);
         
         const col2 = document.createElement("div");
         col2.classList.add("col-sm-9", "text-secondary");
         col2.innerText = data.displayValue;
         row.appendChild(col2);
         
         if (index < filteredData.length - 1) {
         const hr = document.createElement("hr");
         cardBody.appendChild(hr);
         }
         });
         
         return dataConfigurationsList;
         }
         
function createDataConfigurationsList(filteredData) {
  dataConfigurationsList.classList.add("d-flex", "flex-wrap", "text-center"); // Add flex properties for horizontal alignment

  filteredData.forEach((dataConfig) => {
    const badge = document.createElement("div"); // Create a block element for the badge
    badge.classList.add("text-secondary", "p-2", "m-1"); // Add CSS classes for styling the badge
badge.style.textAlign = "center"; // Center the title horizontally

    const link = document.createElement("a");
   try {
     const url = new URL("https://" + dataConfig.displayValue);
    link.href = "https://" + dataConfig.displayValue; // Replace with the URL you want to link to
    link.target = "_blank";
   } catch (error) {
     link.style.pointerEvents = "none"; // Disable link
     link.style.color = "gray"; // Change text color to indicate it's disabled
   }

    const iconSpan = document.createElement("span");
    iconSpan.className = dataConfig.dataPointIconClass + " fa-5x mb-1"; // Add Font Awesome class and size

    const titleDiv = document.createElement("div");
titleDiv.style.textAlign = "center"; // Center the title horizontally
titleDiv.style.width = "92px"; // Center the title within the surrounding box and allow it to break into two lines when needed
    const titleSpan = document.createElement("div");
    titleSpan.innerText = dataConfig.dataPointName; // Display the social platform name
    titleSpan.classList.add("title-span"); // Add CSS classes for styling the title
    titleSpan.style.textAlign = "center"; // Center the title horizontally
    titleDiv.appendChild(titleSpan);

    // Append the icon, link, and titleDiv to the badge
    link.appendChild(iconSpan);
    badge.appendChild(link);
    badge.appendChild(titleDiv);

    dataConfigurationsList.appendChild(badge);
  });

  return dataConfigurationsList;
}
         
         
         const newSlot = document.getElementById("new-slot");
         newSlot.innerHTML = '';
         const headerDiv = document.createElement("div");
         headerDiv.classList.add("card-header","text-center", "h5", "text-secondary");
         headerDiv.innerText = "Verified Properties";
         newSlot.appendChild(headerDiv);
         
         newSlot.appendChild(dataConfigurationsList);
         
         
      </script>
      <% } %>
      <%- include('footer') %>
   </body>
</html>